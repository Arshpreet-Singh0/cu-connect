// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  password         String
  profileImage     String? // URL to profile picture
  role             Role
  department       String
  yearOfGraduation Int?
  bio              String?  @db.VarChar(500)
  skills           String[] // Array of skill names

  socialLinks      SocialLinks?
  codingProfiles   CodingProfiles?
  currCompany     String?
  overallRankScore Float           @default(0)

  chatbotHistory ChatbotHistory[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

enum Role {
  student
  mentor
  alumni
}

model SocialLinks {
  id        String  @id @default(cuid())
  linkedin  String?
  github    String?
  portfolio String?
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
}

model CodingProfiles {
  id             String  @id @default(cuid())
  leetcodeUser   String?
  codeforcesUser String?
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
}

model ChatbotHistory {
  id        String   @id @default(cuid())
  question  String
  answer    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// model Connection {
//   id            String           @id @default(cuid())
//   user          User             @relation("UserConnections", fields: [userId], references: [id])
//   userId        String
//   connectedTo   User             @relation("ConnectedTo", fields: [connectedToId], references: [id])
//   connectedToId String
//   status        ConnectionStatus @default(pending)
//   User          User             @relation(fields: [userId], references: [id])
// }

// enum ConnectionStatus {
//   pending
//   accepted
//   rejected
// }
